// Generated by Copilot 2025-04-23 16:40
import { defineStore } from 'pinia'
import axios from 'axios'

// Define Movie interface inline instead of importing it
export interface Movie {
  id: number
  title: string
  poster_path: string
  overview: string
  release_date: string
  vote_average: number
}

export const useMoviesStore = defineStore('movies', {
  state: () => ({
    trendingMovies: [] as Movie[],
    popularMovies: [] as Movie[],
    searchResults: [] as Movie[],
    selectedMovie: null as Movie | null,
    loading: false,
    error: null as string | null
  }),
  
  actions: {
    async fetchTrending() {
      const config = useRuntimeConfig()
      try {
        this.loading = true
        const response = await axios.get(`${config.public.tmdbApiBaseUrl}/trending/movie/week`, {
          params: {
            api_key: config.public.tmdbApiKey
          }
        })
        this.trendingMovies = response.data.results
      } catch (error: any) {
        this.error = error.message
      } finally {
        this.loading = false
      }
    },
    
    async fetchPopular() {
      const config = useRuntimeConfig()
      try {
        this.loading = true
        const response = await axios.get(`${config.public.tmdbApiBaseUrl}/movie/popular`, {
          params: {
            api_key: config.public.tmdbApiKey
          }
        })
        this.popularMovies = response.data.results
      } catch (error: any) {
        this.error = error.message
      } finally {
        this.loading = false
      }
    },
    
    async searchMovies(query: string) {
      if (!query) {
        this.searchResults = []
        return
      }
      
      const config = useRuntimeConfig()
      try {
        this.loading = true
        const response = await axios.get(`${config.public.tmdbApiBaseUrl}/search/movie`, {
          params: {
            api_key: config.public.tmdbApiKey,
            query
          }
        })
        this.searchResults = response.data.results
      } catch (error: any) {
        this.error = error.message
      } finally {
        this.loading = false
      }
    }
  }
})