// Generated by Copilot 2025-04-23 16:40
import { defineStore } from 'pinia'
import axios from 'axios'

// Define Movie interface inline instead of importing it
export interface Movie {
  id: number
  title: string
  poster_path: string
  overview: string
  release_date: string
  vote_average: number
}

export interface Genre {
  id: number
  name: string
}

export const useMoviesStore = defineStore('movies', {
  state: () => ({
    trendingMovies: [] as Movie[],
    popularMovies: [] as Movie[],
    searchResults: [] as Movie[],
    genreMovies: [] as Movie[],
    recommendedMovies: [] as Movie[],
    genres: [] as Genre[],
    selectedMovie: null as Movie | null,
    loading: false,
    error: null as string | null,
    currentGenreId: null as number | null,
    totalGenrePages: 1
  }),
  
  actions: {
    async fetchTrending() {
      const config = useRuntimeConfig()
      try {
        this.loading = true
        const response = await axios.get(`${config.public.tmdbApiBaseUrl}/trending/movie/week`, {
          params: {
            api_key: config.public.tmdbApiKey
          }
        })
        this.trendingMovies = response.data.results
      } catch (error: any) {
        console.warn('API failed, using mock data:', error.message)
        // Fallback to mock data for demonstration
        const { mockTrendingMovies } = await import('~/utils/mockData')
        this.trendingMovies = mockTrendingMovies
        this.error = null // Clear error since we have fallback data
      } finally {
        this.loading = false
      }
    },

    async fetchTrendingPage(page: number) {
      const config = useRuntimeConfig()
      try {
        this.loading = true
        const response = await axios.get(`${config.public.tmdbApiBaseUrl}/trending/movie/week`, {
          params: {
            api_key: config.public.tmdbApiKey,
            page
          }
        })
        // Append new results without duplicates
        const newMovies = response.data.results.filter((movie: Movie) => 
          !this.trendingMovies.some(existingMovie => existingMovie.id === movie.id)
        )
        this.trendingMovies = [...this.trendingMovies, ...newMovies]
      } catch (error: any) {
        this.error = error.message
      } finally {
        this.loading = false
      }
    },
    
    async fetchPopular() {
      const config = useRuntimeConfig()
      try {
        this.loading = true
        const response = await axios.get(`${config.public.tmdbApiBaseUrl}/movie/popular`, {
          params: {
            api_key: config.public.tmdbApiKey
          }
        })
        this.popularMovies = response.data.results
      } catch (error: any) {
        this.error = error.message
      } finally {
        this.loading = false
      }
    },
    
    clearSearch() {
      this.searchResults = []
      this.error = null
    },

    async searchMovies(query: string) {
      if (!query) {
        this.searchResults = []
        return
      }

      const config = useRuntimeConfig()
      try {
        this.loading = true
        this.error = null

        // Search for movies by title and people (actors/directors) simultaneously
        const [movieResponse, personResponse] = await Promise.all([
          axios.get(`${config.public.tmdbApiBaseUrl}/search/movie`, {
            params: {
              api_key: config.public.tmdbApiKey,
              query
            }
          }),
          axios.get(`${config.public.tmdbApiBaseUrl}/search/person`, {
            params: {
              api_key: config.public.tmdbApiKey,
              query
            }
          })
        ])

        const uniqueMovies = new Map<number, Movie>()

        // Find the most relevant person (actor/director) for the query
        const lowerQuery = query.toLowerCase()
        const person = personResponse.data.results?.find((p: any) =>
          ['Directing', 'Acting'].includes(p.known_for_department) &&
          p.name.toLowerCase().includes(lowerQuery)
        ) || personResponse.data.results?.[0]

        // If a matching person is found, fetch their movie credits first
        if (person) {
          const creditsResponse = await axios.get(
            `${config.public.tmdbApiBaseUrl}/person/${person.id}/movie_credits`,
            {
              params: {
                api_key: config.public.tmdbApiKey
              }
            }
          )

          const castMovies = (creditsResponse.data.cast || []) as Movie[]
          const directedMovies = (creditsResponse.data.crew || [])
            .filter((c: any) => c.job === 'Director') as Movie[]

          ;[...castMovies, ...directedMovies].forEach(movie => {
            uniqueMovies.set(movie.id, movie)
          })
        }

        // Now append movie title search results without duplicates
        const movieResults = movieResponse.data.results as Movie[]
        movieResults.forEach(movie => {
          if (!uniqueMovies.has(movie.id)) {
            uniqueMovies.set(movie.id, movie)
          }
        })

        this.searchResults = Array.from(uniqueMovies.values())
      } catch (error: any) {
        this.error = error.message
      } finally {
        this.loading = false
      }
    },

    async fetchGenres() {
      const config = useRuntimeConfig()
      try {
        this.loading = true
        const response = await axios.get(`${config.public.tmdbApiBaseUrl}/genre/movie/list`, {
          params: {
            api_key: config.public.tmdbApiKey
          }
        })
        this.genres = response.data.genres
      } catch (error: any) {
        this.error = error.message
      } finally {
        this.loading = false
      }
    },

    async fetchMoviesByGenre(genreId: number, page: number = 1) {
      const config = useRuntimeConfig()
      try {
        this.loading = true
        this.currentGenreId = genreId
        
        const response = await axios.get(`${config.public.tmdbApiBaseUrl}/discover/movie`, {
          params: {
            api_key: config.public.tmdbApiKey,
            with_genres: genreId,
            sort_by: 'popularity.desc,release_date.desc', // Show trending movies first, then by newest release date
            'vote_count.gte': 50, // Ensure some minimum popularity
            page,
            include_adult: false
          }
        })
        
        this.genreMovies = response.data.results
        this.totalGenrePages = response.data.total_pages
      } catch (error: any) {
        this.error = error.message
      } finally {
        this.loading = false
      }
    },

    async fetchRecommendedMovies(favoriteMovies: Movie[]) {
      const config = useRuntimeConfig()
      try {
        this.loading = true
        
        if (!favoriteMovies || favoriteMovies.length === 0) {
          this.recommendedMovies = []
          return
        }

        // Try to use real API first
        try {
          const recommendationPromises = favoriteMovies.slice(0, 5).map(async (movie) => {
            try {
              // Try recommendations first, fallback to similar movies
              const [recommendationsResponse, similarResponse] = await Promise.allSettled([
                axios.get(`${config.public.tmdbApiBaseUrl}/movie/${movie.id}/recommendations`, {
                  params: {
                    api_key: config.public.tmdbApiKey,
                    page: 1
                  }
                }),
                axios.get(`${config.public.tmdbApiBaseUrl}/movie/${movie.id}/similar`, {
                  params: {
                    api_key: config.public.tmdbApiKey,
                    page: 1
                  }
                })
              ])

              const recommendations: Movie[] = []
              
              if (recommendationsResponse.status === 'fulfilled') {
                recommendations.push(...recommendationsResponse.value.data.results.slice(0, 4))
              }
              
              if (similarResponse.status === 'fulfilled' && recommendations.length < 4) {
                const similarMovies = similarResponse.value.data.results.slice(0, 4 - recommendations.length)
                recommendations.push(...similarMovies)
              }

              return recommendations
            } catch (error) {
              console.warn(`Failed to fetch recommendations for movie ${movie.id}:`, error)
              return []
            }
          })

          const allRecommendations = await Promise.all(recommendationPromises)
          const flatRecommendations = allRecommendations.flat()

          // Remove duplicates and exclude movies that are already in favorites
          const uniqueRecommendations = new Map<number, Movie>()
          const favoriteIds = new Set(favoriteMovies.map(m => m.id))

          flatRecommendations.forEach(movie => {
            if (movie && movie.id && !favoriteIds.has(movie.id) && !uniqueRecommendations.has(movie.id)) {
              uniqueRecommendations.set(movie.id, movie)
            }
          })

          // Sort by vote average and take top 20
          this.recommendedMovies = Array.from(uniqueRecommendations.values())
            .filter(movie => movie.vote_average && movie.vote_average > 6.0)
            .sort((a, b) => (b.vote_average || 0) - (a.vote_average || 0))
            .slice(0, 20)

          // If we got some results, we're done
          if (this.recommendedMovies.length > 0) {
            return
          }
        } catch (apiError) {
          console.warn('API calls failed, falling back to mock data:', apiError)
        }

        // Fallback to mock data for demonstration
        console.log('Using mock recommended movies for demonstration')
        const { mockRecommendedMovies } = await import('~/utils/mockData')
        
        // Filter out movies that are already in favorites
        const favoriteIds = new Set(favoriteMovies.map(m => m.id))
        this.recommendedMovies = mockRecommendedMovies.filter(movie => !favoriteIds.has(movie.id))
          
      } catch (error: any) {
        console.error('Error fetching recommended movies:', error)
        this.error = error.message
      } finally {
        this.loading = false
      }
    }
  }
})
